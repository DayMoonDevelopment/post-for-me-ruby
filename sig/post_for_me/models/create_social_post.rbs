module PostForMe
  module Models
    type create_social_post =
      {
        caption: String,
        social_accounts: ::Array[String],
        account_configurations: ::Array[PostForMe::CreateSocialPost::AccountConfiguration]?,
        external_id: String?,
        is_draft: bool?,
        media: ::Array[PostForMe::CreateSocialPost::Media]?,
        platform_configurations: PostForMe::PlatformConfigurationsDto?,
        scheduled_at: Time?
      }

    class CreateSocialPost < PostForMe::Internal::Type::BaseModel
      attr_accessor caption: String

      attr_accessor social_accounts: ::Array[String]

      attr_accessor account_configurations: ::Array[PostForMe::CreateSocialPost::AccountConfiguration]?

      attr_accessor external_id: String?

      attr_accessor is_draft: bool?

      attr_accessor media: ::Array[PostForMe::CreateSocialPost::Media]?

      attr_accessor platform_configurations: PostForMe::PlatformConfigurationsDto?

      attr_accessor scheduled_at: Time?

      def initialize: (
        caption: String,
        social_accounts: ::Array[String],
        ?account_configurations: ::Array[PostForMe::CreateSocialPost::AccountConfiguration]?,
        ?external_id: String?,
        ?is_draft: bool?,
        ?media: ::Array[PostForMe::CreateSocialPost::Media]?,
        ?platform_configurations: PostForMe::PlatformConfigurationsDto?,
        ?scheduled_at: Time?
      ) -> void

      def to_hash: -> {
        caption: String,
        social_accounts: ::Array[String],
        account_configurations: ::Array[PostForMe::CreateSocialPost::AccountConfiguration]?,
        external_id: String?,
        is_draft: bool?,
        media: ::Array[PostForMe::CreateSocialPost::Media]?,
        platform_configurations: PostForMe::PlatformConfigurationsDto?,
        scheduled_at: Time?
      }

      type account_configuration =
        {
          configuration: PostForMe::CreateSocialPost::AccountConfiguration::Configuration,
          social_account_id: String
        }

      class AccountConfiguration < PostForMe::Internal::Type::BaseModel
        attr_accessor configuration: PostForMe::CreateSocialPost::AccountConfiguration::Configuration

        attr_accessor social_account_id: String

        def initialize: (
          configuration: PostForMe::CreateSocialPost::AccountConfiguration::Configuration,
          social_account_id: String
        ) -> void

        def to_hash: -> {
          configuration: PostForMe::CreateSocialPost::AccountConfiguration::Configuration,
          social_account_id: String
        }

        type configuration =
          {
            allow_comment: bool?,
            allow_duet: bool?,
            allow_stitch: bool?,
            auto_add_music: bool?,
            board_ids: ::Array[String]?,
            caption: top?,
            collaborators: ::Array[::Array[top]]?,
            community_id: String,
            disclose_branded_content: bool?,
            disclose_your_brand: bool?,
            is_ai_generated: bool?,
            is_draft: bool?,
            link: String?,
            location: String?,
            media: ::Array[String]?,
            placement: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::placement?,
            poll: PostForMe::CreateSocialPost::AccountConfiguration::Configuration::Poll,
            privacy_status: String?,
            quote_tweet_id: String,
            reply_settings: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::reply_settings?,
            share_to_feed: bool?,
            title: String?
          }

        class Configuration < PostForMe::Internal::Type::BaseModel
          attr_accessor allow_comment: bool?

          attr_accessor allow_duet: bool?

          attr_accessor allow_stitch: bool?

          attr_accessor auto_add_music: bool?

          attr_accessor board_ids: ::Array[String]?

          attr_accessor caption: top?

          attr_accessor collaborators: ::Array[::Array[top]]?

          attr_reader community_id: String?

          def community_id=: (String) -> String

          attr_accessor disclose_branded_content: bool?

          attr_accessor disclose_your_brand: bool?

          attr_accessor is_ai_generated: bool?

          attr_accessor is_draft: bool?

          attr_accessor link: String?

          attr_accessor location: String?

          attr_accessor media: ::Array[String]?

          attr_accessor placement: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::placement?

          attr_reader poll: PostForMe::CreateSocialPost::AccountConfiguration::Configuration::Poll?

          def poll=: (
            PostForMe::CreateSocialPost::AccountConfiguration::Configuration::Poll
          ) -> PostForMe::CreateSocialPost::AccountConfiguration::Configuration::Poll

          attr_accessor privacy_status: String?

          attr_reader quote_tweet_id: String?

          def quote_tweet_id=: (String) -> String

          attr_accessor reply_settings: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::reply_settings?

          attr_accessor share_to_feed: bool?

          attr_accessor title: String?

          def initialize: (
            ?allow_comment: bool?,
            ?allow_duet: bool?,
            ?allow_stitch: bool?,
            ?auto_add_music: bool?,
            ?board_ids: ::Array[String]?,
            ?caption: top?,
            ?collaborators: ::Array[::Array[top]]?,
            ?community_id: String,
            ?disclose_branded_content: bool?,
            ?disclose_your_brand: bool?,
            ?is_ai_generated: bool?,
            ?is_draft: bool?,
            ?link: String?,
            ?location: String?,
            ?media: ::Array[String]?,
            ?placement: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::placement?,
            ?poll: PostForMe::CreateSocialPost::AccountConfiguration::Configuration::Poll,
            ?privacy_status: String?,
            ?quote_tweet_id: String,
            ?reply_settings: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::reply_settings?,
            ?share_to_feed: bool?,
            ?title: String?
          ) -> void

          def to_hash: -> {
            allow_comment: bool?,
            allow_duet: bool?,
            allow_stitch: bool?,
            auto_add_music: bool?,
            board_ids: ::Array[String]?,
            caption: top?,
            collaborators: ::Array[::Array[top]]?,
            community_id: String,
            disclose_branded_content: bool?,
            disclose_your_brand: bool?,
            is_ai_generated: bool?,
            is_draft: bool?,
            link: String?,
            location: String?,
            media: ::Array[String]?,
            placement: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::placement?,
            poll: PostForMe::CreateSocialPost::AccountConfiguration::Configuration::Poll,
            privacy_status: String?,
            quote_tweet_id: String,
            reply_settings: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::reply_settings?,
            share_to_feed: bool?,
            title: String?
          }

          type placement = :reels | :timeline | :stories

          module Placement
            extend PostForMe::Internal::Type::Enum

            REELS: :reels
            TIMELINE: :timeline
            STORIES: :stories

            def self?.values: -> ::Array[PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::placement]
          end

          type poll =
            {
              duration_minutes: Float,
              options: ::Array[String],
              reply_settings: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::Poll::reply_settings
            }

          class Poll < PostForMe::Internal::Type::BaseModel
            attr_accessor duration_minutes: Float

            attr_accessor options: ::Array[String]

            attr_reader reply_settings: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::Poll::reply_settings?

            def reply_settings=: (
              PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::Poll::reply_settings
            ) -> PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::Poll::reply_settings

            def initialize: (
              duration_minutes: Float,
              options: ::Array[String],
              ?reply_settings: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::Poll::reply_settings
            ) -> void

            def to_hash: -> {
              duration_minutes: Float,
              options: ::Array[String],
              reply_settings: PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::Poll::reply_settings
            }

            type reply_settings =
              :following | :mentionedUsers | :subscribers | :verified

            module ReplySettings
              extend PostForMe::Internal::Type::Enum

              FOLLOWING: :following
              MENTIONED_USERS: :mentionedUsers
              SUBSCRIBERS: :subscribers
              VERIFIED: :verified

              def self?.values: -> ::Array[PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::Poll::reply_settings]
            end
          end

          type reply_settings =
            :following | :mentionedUsers | :subscribers | :verified

          module ReplySettings
            extend PostForMe::Internal::Type::Enum

            FOLLOWING: :following
            MENTIONED_USERS: :mentionedUsers
            SUBSCRIBERS: :subscribers
            VERIFIED: :verified

            def self?.values: -> ::Array[PostForMe::Models::CreateSocialPost::AccountConfiguration::Configuration::reply_settings]
          end
        end
      end

      type media =
        {
          url: String,
          tags: ::Array[PostForMe::CreateSocialPost::Media::Tag]?,
          thumbnail_timestamp_ms: top?,
          thumbnail_url: top?
        }

      class Media < PostForMe::Internal::Type::BaseModel
        attr_accessor url: String

        attr_accessor tags: ::Array[PostForMe::CreateSocialPost::Media::Tag]?

        attr_accessor thumbnail_timestamp_ms: top?

        attr_accessor thumbnail_url: top?

        def initialize: (
          url: String,
          ?tags: ::Array[PostForMe::CreateSocialPost::Media::Tag]?,
          ?thumbnail_timestamp_ms: top?,
          ?thumbnail_url: top?
        ) -> void

        def to_hash: -> {
          url: String,
          tags: ::Array[PostForMe::CreateSocialPost::Media::Tag]?,
          thumbnail_timestamp_ms: top?,
          thumbnail_url: top?
        }

        type tag =
          {
            id: String,
            platform: PostForMe::Models::CreateSocialPost::Media::Tag::platform,
            type: PostForMe::Models::CreateSocialPost::Media::Tag::type_,
            x: Float,
            y_: Float
          }

        class Tag < PostForMe::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor platform: PostForMe::Models::CreateSocialPost::Media::Tag::platform

          attr_accessor type: PostForMe::Models::CreateSocialPost::Media::Tag::type_

          attr_reader x: Float?

          def x=: (Float) -> Float

          attr_reader y_: Float?

          def y_=: (Float) -> Float

          def initialize: (
            id: String,
            platform: PostForMe::Models::CreateSocialPost::Media::Tag::platform,
            type: PostForMe::Models::CreateSocialPost::Media::Tag::type_,
            ?x: Float,
            ?y_: Float
          ) -> void

          def to_hash: -> {
            id: String,
            platform: PostForMe::Models::CreateSocialPost::Media::Tag::platform,
            type: PostForMe::Models::CreateSocialPost::Media::Tag::type_,
            x: Float,
            y_: Float
          }

          type platform = :facebook | :instagram

          module Platform
            extend PostForMe::Internal::Type::Enum

            FACEBOOK: :facebook
            INSTAGRAM: :instagram

            def self?.values: -> ::Array[PostForMe::Models::CreateSocialPost::Media::Tag::platform]
          end

          type type_ = :user | :product

          module Type
            extend PostForMe::Internal::Type::Enum

            USER: :user
            PRODUCT: :product

            def self?.values: -> ::Array[PostForMe::Models::CreateSocialPost::Media::Tag::type_]
          end
        end
      end
    end
  end
end
